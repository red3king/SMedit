

class OperationSpec(object):
    def __init__(self, field_name, field_type, change_type=None):
        self.op_name = None
        self.field_name = field_name
        self.field_type = field_type
        self.allow_collapse = True
        self.change_type = change_type

    def make_op_name(self, entity_type_name):
        # "Resource", "name" -> "OpResourceName"
        # "Resource", "config_var" -> "OpResourceConfigVar"
        
        parts = self.field_name.split("_")

        rest = ""
        for part in parts:
            rest += part[0].upper() + part[1:]

        self.op_name = "Op" + entity_type_name + rest

    @property
    def should_signal(self):
        return self.change_type != None


class OperationGenerator(object):
    def __init__(self, entity_type_name, is_machine_owned, op_spec_list):
        self.entity_type_name = entity_type_name
        self.entity_op_superclass = entity_type_name + "ChgOperation"
        self.op_spec_list = op_spec_list
        self.is_machine_owned = is_machine_owned

        for spec in self.op_spec_list:
            spec.make_op_name(entity_type_name)

    def make_header(self):
        header = [""]

        for spec in self.op_spec_list:
            header.append("")
            header.append(f"class {spec.op_name} : public {self.entity_op_superclass}")
            header.append("{")
            header.append("    // AUTOGENERATED, DO NOT MODIFY")
            header.append("    public:")

            machine_arg = "Machine* machine, " if self.is_machine_owned else ""
            header.append(f"        {spec.op_name}({machine_arg}{self.entity_type_name}* {self.entity_type_name.lower()}, {spec.field_type} {spec.field_name});")
            header.append(f"        {spec.op_name}* clone();")
            header.append("")
            header.append(f"        void execute_impl({self.entity_type_name}* {self.entity_type_name.lower()});")

            if(spec.allow_collapse):
                header.append("        bool may_collapse_impl(Operation& other);")
                header.append("        void collapse(Operation& other);")
            
            header.append("")
            header.append("    private:")
            header.append(f"        {spec.field_type} {spec.field_name};")
            header.append("};")
            header.append("")
        
        return header

    def make_cpp(self):
        cpp = ["", ""]

        for spec in self.op_spec_list:
            entity_id_str = f"{self.entity_type_name.lower()}_id"

            cpp.append(f"// {spec.field_name}  -  AUTOGENERATED, DO NOT MODIFY")
            cpp.append("")

            # constructor
            machine_arg = "Machine* machine, " if self.is_machine_owned else ""
            machine_var = "machine, " if self.is_machine_owned else ""
            cpp.append(f"{spec.op_name}::{spec.op_name}({machine_arg}{self.entity_type_name}* {self.entity_type_name.lower()}, {spec.field_type} {spec.field_name}) : {self.entity_op_superclass}({machine_var}{self.entity_type_name.lower()})")
            cpp.append("{")
            cpp.append(f"    this->{spec.field_name} = {spec.field_name};")
            cpp.append("}")
            cpp.append("")
            cpp.append("")

            # clone
            cpp.append(f"{spec.op_name}* {spec.op_name}::clone()")
            cpp.append("{")
            cpp.append(f"    return new {spec.op_name}(*this);")
            cpp.append("}")
            cpp.append("")
            cpp.append("")

            # execute_impl
            cpp.append(f"void {spec.op_name}::execute_impl({self.entity_type_name}* {self.entity_type_name.lower()})")
            cpp.append("{")
            cpp.append(f"    {self.entity_type_name.lower()}->{spec.field_name} = {spec.field_name};")
            
            if spec.should_signal:
                cpp.append(f"    signals.fire_model_changed({self.entity_type_name.upper()}, MODIFY, {self.entity_type_name.lower()}->id, {spec.change_type});")
                
            cpp.append("}")
            cpp.append("")
            cpp.append("")
       
            if(spec.allow_collapse):
                # may_collapse_impl
                cpp.append(f"bool {spec.op_name}::may_collapse_impl(Operation& other)")
                cpp.append("{")
                cpp.append(f"    auto op = ({spec.op_name}&) other;")
                cpp.append(f"    return {entity_id_str} == op.{entity_id_str};")
                cpp.append("}")
                cpp.append("")
                cpp.append("")

                # collapse
                cpp.append(f"void {spec.op_name}::collapse(Operation& other)")
                cpp.append("{")
                cpp.append(f"    auto op = ({spec.op_name}&) other;")
                cpp.append(f"    {spec.field_name} = op.{spec.field_name};")
                cpp.append("}")
                cpp.append("")
                cpp.append("")

        return cpp

