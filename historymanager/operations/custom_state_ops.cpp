#include "custom_state_ops.h"
#include "state_ops.h"  // for delete_state()
#include "signals.h"


// Abstract change

CustomStateClassChgOperation::CustomStateClassChgOperation(CustomStateClass *custom_state_class)
{
    customstateclass_id = custom_state_class->id;
}


unsigned int CustomStateClassChgOperation::execute(Project& project)
{
    CustomStateClass *custom_state_class = project.get_custom_state_class_by_id(customstateclass_id);
    execute_impl(custom_state_class);
    signals.fire_model_changed(CUSTOM_STATE_CLASS, MODIFY, customstateclass_id);
    return customstateclass_id;
}


// Create

OpCustStateCreate::OpCustStateCreate(string name, string path)
{
    this->name = name;
    this->path = path;
}


unsigned int OpCustStateCreate::execute(Project& project)
{
    CustomStateClass *custom_state_class = new CustomStateClass(project.get_next_id());
    custom_state_class->name = name;
    custom_state_class->path = path;
    project.custom_state_classes.push_back(custom_state_class);
    
    signals.fire_model_changed(CUSTOM_STATE_CLASS, CREATE, custom_state_class->id);
    return custom_state_class->id;
}


OpCustStateCreate *OpCustStateCreate::clone()
{
    return new OpCustStateCreate(*this);
}


// Delete

OpCustStateDelete::OpCustStateDelete(CustomStateClass *to_delete)
{
    to_delete_id = to_delete->id;
}


bool delete_next_state(Machine *machine, unsigned int custom_state_class_id)
{
    for(int i=0; i<machine->states.size(); i++)
    {
        State *state = machine->states[i];
        if(state->type == custom_state_class_id)
        {
            delete_state(machine, state);
            return true;
        }
    }
    return false;
}


unsigned int OpCustStateDelete::execute(Project& project)
{
    int cindex = project.get_cindex_by_id(to_delete_id);

    // delete all states of this type first (user has confirmed)
    for(int i=0; i<project.machines.size(); i++)
    {
        Machine* machine = project.machines[i];
        while(delete_next_state(machine, to_delete_id));
    }

    signals.fire_model_changed(CUSTOM_STATE_CLASS, PRE_DELETE, to_delete_id);

    delete project.custom_state_classes[cindex];
    project.custom_state_classes.erase(project.custom_state_classes.begin() + cindex);
    return to_delete_id;
}


OpCustStateDelete *OpCustStateDelete::clone()
{
    return new OpCustStateDelete(*this);
}


// MACHINE GENERATED CODE BELOW, DO NOT EDIT
// USE COG TO REGENERATE

/*[[[cog

import os
import sys
sys.path.append(os.getcwd())
from codegen.op_specs import *

for line in custom_state_class_opgen.make_cpp():
    cog.outl(line)

]]]*/


// path  -  AUTOGENERATED, DO NOT MODIFY

OpCustomStateClassPath::OpCustomStateClassPath(CustomStateClass* customstateclass, string path) : CustomStateClassChgOperation(customstateclass)
{
    this->path = path;
}


OpCustomStateClassPath* OpCustomStateClassPath::clone()
{
    return new OpCustomStateClassPath(*this);
}


void OpCustomStateClassPath::execute_impl(CustomStateClass* customstateclass)
{
    customstateclass->path = path;
}


bool OpCustomStateClassPath::may_collapse_impl(Operation& other)
{
    auto op = (OpCustomStateClassPath&) other;
    return customstateclass_id == op.customstateclass_id;
}


void OpCustomStateClassPath::collapse(Operation& other)
{
    auto op = (OpCustomStateClassPath&) other;
    path = op.path;
}


// name  -  AUTOGENERATED, DO NOT MODIFY

OpCustomStateClassName::OpCustomStateClassName(CustomStateClass* customstateclass, string name) : CustomStateClassChgOperation(customstateclass)
{
    this->name = name;
}


OpCustomStateClassName* OpCustomStateClassName::clone()
{
    return new OpCustomStateClassName(*this);
}


void OpCustomStateClassName::execute_impl(CustomStateClass* customstateclass)
{
    customstateclass->name = name;
}


bool OpCustomStateClassName::may_collapse_impl(Operation& other)
{
    auto op = (OpCustomStateClassName&) other;
    return customstateclass_id == op.customstateclass_id;
}


void OpCustomStateClassName::collapse(Operation& other)
{
    auto op = (OpCustomStateClassName&) other;
    name = op.name;
}


// transition_defs  -  AUTOGENERATED, DO NOT MODIFY

OpCustomStateClassTransitionDefs::OpCustomStateClassTransitionDefs(CustomStateClass* customstateclass, vector<CustomTransitionDef> transition_defs) : CustomStateClassChgOperation(customstateclass)
{
    this->transition_defs = transition_defs;
}


OpCustomStateClassTransitionDefs* OpCustomStateClassTransitionDefs::clone()
{
    return new OpCustomStateClassTransitionDefs(*this);
}


void OpCustomStateClassTransitionDefs::execute_impl(CustomStateClass* customstateclass)
{
    customstateclass->transition_defs = transition_defs;
}


bool OpCustomStateClassTransitionDefs::may_collapse_impl(Operation& other)
{
    auto op = (OpCustomStateClassTransitionDefs&) other;
    return customstateclass_id == op.customstateclass_id;
}


void OpCustomStateClassTransitionDefs::collapse(Operation& other)
{
    auto op = (OpCustomStateClassTransitionDefs&) other;
    transition_defs = op.transition_defs;
}


//[[[end]]]

