#include "machine_ops.h"
#include "models/project.h"
#include "signals.h"


// Generic

MachineOperation::MachineOperation(Machine* machine) : MachineRelatedOperation(machine) { }


// Change
MachineChgOperation::MachineChgOperation(Machine* machine) : MachineOperation(machine) { }


unsigned int MachineChgOperation::execute(Project& project)
{
    Machine* machine = project.get_machine_by_id(machine_id);
    execute_impl(machine);
    signals.fire_model_changed(MACHINE, MODIFY, machine_id);
    return machine_id;
}


// Create
OpMachineCreate::OpMachineCreate(string name) : MachineOperation(nullptr)
{
    this->name = name;
}


unsigned int OpMachineCreate::execute(Project& project)
{
    unsigned int machine_id = project.get_next_id();
    Machine* m = new Machine(machine_id);
    m->name = name;
    project.machines.push_back(m);
    signals.fire_model_changed(MACHINE, CREATE, machine_id);
    return m->id;
}


OpMachineCreate* OpMachineCreate::clone()
{
    return new OpMachineCreate(*this);
}


// Delete
OpMachineDelete::OpMachineDelete(Machine* machine) : MachineOperation(machine)
{

}


OpMachineDelete* OpMachineDelete::clone()
{
    return new OpMachineDelete(*this);
}


unsigned int OpMachineDelete::execute(Project& project)
{
    signals.fire_model_changed(MACHINE, PRE_DELETE, machine_id);
    int i = project.get_mindex_by_id(machine_id);
    delete project.machines[i];
    project.machines.erase(project.machines.begin() + i);
    return machine_id;
}


// MACHINE GENERATED CODE BELOW, DO NOT EDIT
// USE COG TO REGENERATE

/*[[[cog

import os
import sys
sys.path.append(os.getcwd())
from codegen.op_specs import *

for line in machine_opgen.make_cpp():
    cog.outl(line)

]]]*/


// name  -  AUTOGENERATED, DO NOT MODIFY

OpMachineName::OpMachineName(Machine* machine, string name) : MachineChgOperation(machine)
{
    this->name = name;
}


OpMachineName* OpMachineName::clone()
{
    return new OpMachineName(*this);
}


void OpMachineName::execute_impl(Machine* machine)
{
    machine->name = name;
}


bool OpMachineName::may_collapse_impl(Operation& other)
{
    auto op = (OpMachineName&) other;
    return machine_id == op.machine_id;
}


void OpMachineName::collapse(Operation& other)
{
    auto op = (OpMachineName&) other;
    name = op.name;
}


// run_on_start  -  AUTOGENERATED, DO NOT MODIFY

OpMachineRunOnStart::OpMachineRunOnStart(Machine* machine, bool run_on_start) : MachineChgOperation(machine)
{
    this->run_on_start = run_on_start;
}


OpMachineRunOnStart* OpMachineRunOnStart::clone()
{
    return new OpMachineRunOnStart(*this);
}


void OpMachineRunOnStart::execute_impl(Machine* machine)
{
    machine->run_on_start = run_on_start;
}


bool OpMachineRunOnStart::may_collapse_impl(Operation& other)
{
    auto op = (OpMachineRunOnStart&) other;
    return machine_id == op.machine_id;
}


void OpMachineRunOnStart::collapse(Operation& other)
{
    auto op = (OpMachineRunOnStart&) other;
    run_on_start = op.run_on_start;
}


//[[[end]]]




