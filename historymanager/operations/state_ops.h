#pragma once

#include "historymanager/operation.h"
#include "models/datatypes/argdef.h"
#include "models/state.h"
#include "models/custom_config.h"


class StateOperation : public MachineRelatedOperation
{
    public:
        StateOperation(Machine* machine, State* state);
        unsigned int state_id;
};


class StateChgOperation : public StateOperation  // abc for state modification
{
    public:
        StateChgOperation(Machine* machine, State* state);
        virtual unsigned int execute(Project& project);
        virtual void execute_impl(State* state)=0;
};


class OpStateCreate : public StateOperation
{
    public:
        OpStateCreate(Machine* machine, float x, float y);
        unsigned int execute(Project& project);
        OpStateCreate* clone();

    private:
        float x, y;
};


class OpStateDelete : public StateOperation
{
    public:
        OpStateDelete(Machine* machine, State* state);
        unsigned int execute(Project& project);
        OpStateDelete* clone();
};


void delete_state(Machine* machine, State* state);


class OpStateMove : public StateOperation
{
    public:
        OpStateMove(Machine* machine, State* state, float x, float y);
        unsigned int execute(Project& project);
        OpStateMove* clone();

        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:      
        float x, y;
};


class OpStateType : public StateChgOperation
{
    public:
        OpStateType(Machine* machine, State* state, int type);
        OpStateType* clone();

        unsigned int execute(Project& project);
        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        int type;
};


class OpStateConfig : public StateChgOperation
{
    public:
        OpStateConfig(Machine* machine, State* state, CustomStateConfig config);
        OpStateConfig* clone();
        
        void execute_impl(State* state);
        bool may_collapse_impl(Operation &other);
        void collapse(Operation &other);
        
    private:
        string name;
        LVOV value;
};



// MACHINE GENERATED CODE BELOW, DO NOT EDIT
// USE COG TO REGENERATE

/*[[[cog

import os
import sys
sys.path.append(os.getcwd())
from codegen.op_specs import *

for line in state_opgen.make_header():
    cog.outl(line)

]]]*/


class OpStateName : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateName(Machine* machine, State* state, string name);
        OpStateName* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        string name;
};


class OpStateCode : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateCode(Machine* machine, State* state, string code);
        OpStateCode* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        string code;
};


class OpStateJoinPidVariable : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateJoinPidVariable(Machine* machine, State* state, string join_pid_variable);
        OpStateJoinPidVariable* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        string join_pid_variable;
};


class OpStateJoinResultVariable : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateJoinResultVariable(Machine* machine, State* state, string join_result_variable);
        OpStateJoinResultVariable* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        string join_result_variable;
};


class OpStateReturnValue : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateReturnValue(Machine* machine, State* state, LVOV return_value);
        OpStateReturnValue* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        LVOV return_value;
};


class OpStateInitialArgs : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateInitialArgs(Machine* machine, State* state, vector<ArgDef> initial_args);
        OpStateInitialArgs* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        vector<ArgDef> initial_args;
};


class OpStateLaunchTaskName : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateLaunchTaskName(Machine* machine, State* state, LVOV launch_task_name);
        OpStateLaunchTaskName* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        LVOV launch_task_name;
};


class OpStateLaunchArgs : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateLaunchArgs(Machine* machine, State* state, vector<Arg> launch_args);
        OpStateLaunchArgs* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        vector<Arg> launch_args;
};


class OpStateLaunchResultVariable : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateLaunchResultVariable(Machine* machine, State* state, string launch_result_variable);
        OpStateLaunchResultVariable* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        string launch_result_variable;
};


class OpStateLaunchSynchronous : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateLaunchSynchronous(Machine* machine, State* state, bool launch_synchronous);
        OpStateLaunchSynchronous* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        bool launch_synchronous;
};


class OpStateHasReturnValue : public StateChgOperation
{
    // AUTOGENERATED, DO NOT MODIFY
    public:
        OpStateHasReturnValue(Machine* machine, State* state, bool has_return_value);
        OpStateHasReturnValue* clone();

        void execute_impl(State* state);
        bool may_collapse_impl(Operation& other);
        void collapse(Operation& other);

    private:
        bool has_return_value;
};

//[[[end]]]

