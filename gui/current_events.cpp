#include "current_events.h"


MouseButton get_button(guint button)
{
    switch(button)
    {
        case 1:
            return MB_LEFT;
        case 2:
            return MB_MIDDLE;
        case 3:
            return MB_RIGHT;
        default:
            return MB_NONE;
    }
}


MouseScroll get_scroll(GdkScrollDirection direction)
{
    // TODO - may have to rewrite to deal with GDK_SCROLL_SMOOTH
    // if that is generated by laptop touchpads of other stuff
    // without also generating the non smooth ones...
    switch(direction)
    {
        case GDK_SCROLL_UP:
            return SC_UP;
        case GDK_SCROLL_DOWN:
            return SC_DOWN;
        default:
            return SC_NONE;
    }

}


Key get_key(guint keyval)
{
    // see https://gitlab.gnome.org/GNOME/gtk/raw/master/gdk/gdkkeysyms.h
    switch(keyval)
    {
        // bug if user is silly enough to use both ctrls at once
        // but who would do that
        case GDK_KEY_Control_L:
        case GDK_KEY_Control_R:
            return K_CTRL;
        case GDK_KEY_s:
        case GDK_KEY_S:
            return K_S;
        case GDK_KEY_t:
        case GDK_KEY_T:
            return K_T;
        case GDK_KEY_l:
        case GDK_KEY_L:
            return K_L;
        default:
            return K_NONE;
    }
}


void CurrentEvents::clear_current_event()
{
    event_type = ET_NONE;
    key = K_NONE;
    mouse_button = MB_NONE;
    mouse_scroll = SC_NONE;
}


bool CurrentEvents::on_button_event(GdkEventButton* button_event)
{
    mouse_x = (float) button_event->x;
    mouse_y = (float) button_event->y;
    mouse_button = get_button(button_event->button);

    if(button_event->type == GDK_BUTTON_PRESS)
    {
        pressed_buttons.insert(mouse_button);
        event_type = ET_MB_PRESS;
    }
    else if(button_event->type == GDK_BUTTON_RELEASE)
    {
        pressed_buttons.erase(mouse_button);
        event_type = ET_MB_RELEASE;
    }
    else if(button_event->type == GDK_2BUTTON_PRESS)
    {
        event_type = ET_MB_DOUBLE;
    }
    else if(button_event->type == GDK_3BUTTON_PRESS)
    {   
        event_type = ET_MB_TRIPLE;
    }

    return true;
}


bool CurrentEvents::on_scroll_event(GdkEventScroll* scroll_event)
{
    mouse_x = (float) scroll_event->x;
    mouse_y = (float) scroll_event->y;
    mouse_scroll = get_scroll(scroll_event->direction);
    event_type = ET_SCROLL;
    return true;
}


bool CurrentEvents::on_key_event(GdkEventKey* key_event)
{
    key = get_key(key_event->keyval);

    if(key_event->type == GDK_KEY_PRESS)
    {
        pressed_keys.insert(key);
        event_type = ET_KEY_PRESS;
    }
    else
    {
        pressed_keys.erase(key);
        event_type = ET_KEY_RELEASE;
    }
    return true;
}


bool CurrentEvents::on_motion_notify_event(GdkEventMotion* motion_event)
{
    event_type = ET_M_MOVE;
    mouse_x = (float) motion_event->x;
    mouse_y = (float) motion_event->y;
    return true;
}
