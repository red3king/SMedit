Problem: 
    If we have class (for state, transition, etc) which handles both the storage of connectivity and configuration data, but also handles the drawing, then there's an issue with the undo system: 

    consider moving a state with multiple attached transitions.
    each tick, we move a couple pixels, following the mouse
    do we:
        - generate an undo action each tick and fill up our ram?
        - hide the affected objects and create a fake copy which we re-render turning the user's mouse movements?
            (then when the user lets go, we create a single undo action representing the entire motion)
        - create a parallel system of gui objects and data objects, let the user manipulate the gui objects, then when they are done, the corresponding action is created for the data object?


    current best (sleep deprived) idea - generate undo action each tick, but have it "collapse" into the previous action in the history if the previous action is of the same type and pertaining the the same object

    this will work for state moves.

    what about transition endpoint moves, how do those work?
        -could create new class called ghostTransition which would be rendered on top of everything, possibly hide the real transition, and do it that way
        -or, we could make it possible for transitions to be "dangling", so that we can generate an undo action for each tick
            -having dangling transitions may make it a little easier for the user to modify the state machine, when they delete a state we can just leave the pointers to/from it dangling


